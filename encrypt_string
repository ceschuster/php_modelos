<?php
  $idXmlOk = encrypt_decrypt('encrypt', $linha["idXml"]);
?>

<?php
	function encryptIt_OLD( $q ) {
		$cryptKey  = 'dafs4tsggnorXffr45gomeg';
		$qEncoded      = base64_encode( openssl_encrypt( MCRYPT_RIJNDAEL_256, md5( $cryptKey ), $q, MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ) );
		return( $qEncoded );
	}
	
	function decryptIt_OLD( $q ) {
		$cryptKey  = 'dafs4tsggnorXffr45gomeg';
		$qDecoded      = rtrim( mcrypt_decrypt( MCRYPT_RIJNDAEL_256, md5( $cryptKey ), base64_decode( $q ), MCRYPT_MODE_CBC, md5( md5( $cryptKey ) ) ), "\0");
		return( $qDecoded );
	}
	
	
	/**
		* simple method to encrypt or decrypt a plain text string
		* initialization vector(IV) has to be the same when encrypting and decrypting
		* 
		* @param string $action: can be 'encrypt' or 'decrypt'
		* @param string $string: string to encrypt or decrypt
		*
		* @return string
	*/
	//
	//
	// 	$encrypted_txt = encrypt_decrypt('encrypt', $plain_txt);
	//	$decrypted_txt = encrypt_decrypt('decrypt', $encrypted_txt);
	function encrypt_decrypt($action, $string) {
		$output = false;
		$encrypt_method = "AES-256-CBC";
		$secret_key = 'secret key SA Consultoria 2019';
		$secret_iv = 'SA Consultoria 2019 secret key inv';
		// hash
		$key = hash('sha256', $secret_key);
		
		// iv - encrypt method AES-256-CBC expects 16 bytes - else you will get a warning
		$iv = substr(hash('sha256', $secret_iv), 0, 16);
		if ( $action == 'encrypt' ) {
			$output = openssl_encrypt($string, $encrypt_method, $key, 0, $iv);
			$output = base64_encode($output);
			} else if( $action == 'decrypt' ) {
			$output = openssl_decrypt(base64_decode($string), $encrypt_method, $key, 0, $iv);
		}
		return $output;
	}
?>	
